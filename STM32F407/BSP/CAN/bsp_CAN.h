#ifndef __BSP_CAN_H
#define __BSP_CAN_H
/***********************************************************************************************************************************
 ** 【代码编写】  魔女科技团队
 **
 ** 【淘    宝】  魔女开发板      https://demoboard.taobao.com
 ***********************************************************************************************************************************
 ** 【文件名称】  bsp_can.h
 **
 ** 【实现功能】  CAN通信
 **
 ** 【适用平台】  STM32F407 + 标准库v1.8 + keil5
 **
 ** 【硬件重点】  1_接线1：CAN转换芯片与F407芯片间接线，在板子左上角排针位，有两跳线位，插上跳线帽，即可使CAN转换芯片与F407芯片的PA11、PA12引脚相连接;
 **               2-接线2：CAN设备与CAN设备间的接线，H端接H端，L端接L端; 只要能正常导电，用啥线都成，测试时无需双绞线或屏蔽线;
 **               3_接地： 无需接地！很多买家调试不通，总是疑惑是否接地的问题，明确：无需接地;
 **               4_终端电阻：CAN电气要求，相距最远的两个设备上，得有120R的终端电阻; 在测试时，三几个设备都有终端电阻，也是可以通信的，但最好只保留两个终端电阻;
 **               5_通信距离：通信速度与距离成反比，500Kbps时理论上最大通信距离约130米，125Kbps时530米;
 **               6_调试不通时，别着急撸代码，检查上述接线1，接线2，以及，断开H、L的接线，分别测量H对地、L对地的闲时电压，应在2.5V左右，可接受范围：2.0V~3.0V;
 **
 ** 【程序重点】  1_初始化：    需要移植时，注意所用引脚是PA11、PA12, 还是重映射后的PB8、PB9;
 **               2_波特率：    本示例配置为500Kbps.网上教程，对CAN的时序和波特率计算，描述得很复杂。其实，常用的波特率来来去去就那几种，需要什么波特率直接上csdn抄配置就好，新手别浪费时间。
 **               3_筛选器：    CAN应用的重中之重，必须理解透彻; 过滤器的参数设置，特别是CAN_FilterId、CAN_FilterMaskId, 必须理解得明明白白;
 **               4_列表模式：  已设置的过滤器中，某一个过滤器中的CAN_FilterId或CAN_FilterMaskId的值，必须与总线上的帧ID相同，才会接收这个帧; 否则直接放弃这一帧的接收工作，等待下一帧数据;
 **               5_屏蔽模式：  同上，但，CAN_FilterId是验收码，CAN_FilterMaskId是屏蔽位值;
 **                             把CAN_FilterMaskId的值想像成二进制，其中为1的位，帧ID与验收码对应位的值，两者必须相同，帧才被接收。其中为0的位，不对比;
 **                             简单地说，就是按位与运算，if((ID &= CAN_FilterMaskId) == (CAN_FilterId &= CAN_FilterMaskId)) { 接收 } else { 放弃 }  ;
 **               6_接收所有帧：按上5，只要把其中一个过滤器，设置为屏蔽模式，CAN_FilterMaskId设置为0x00000000，即可接收所有帧数据;
 **               7_有效负载：  每帧数据，最大有效负载：8字节; 超过这个数量，需要另行编写分包函数作处理，即一帧一帧地发送;
 **               8_过滤器匹配序号:  有妙用，用多了才会明白。这个匹配序号，和过滤器编号，是不一样的。大概地：从过滤器0开始，每个过滤器默认是16位宽*2, 如果设置32位宽则*1; 没有被使用的过滤器，也会算序号; 细品;
 **
 ** 【更新记录】  2022-11-26  取消所有函数，使用标准库写法
 **               2022-10-03  重写各函数，更新注释
 **               2022-06-02  文件建立
 **
 ** 【 备  注 】  新手切勿着急撸代码，先到csdn刨上十来篇CAN文章，列好笔记和疑问，再回头撸代码。(发现大部分新手很爱撞南墙)
 **               新手勿咨询！CAN到底比USART复杂多少，心里要有个数，并非三言两语就能解答疑难的。还是认真刨csdn吧。
************************************************************************************************************************************/
#include "stm32f4xx.h"
#include "stdio.h"
#include "bsp_LCD_ILI9341.h"



/*****************************************************************************
 ** 移植配置
****************************************************************************/
#define CAN_GPIO_REMAP    1     // 查看原理图，确认CAN芯片连接的是哪组引脚
                                // 0-使用CAN_TX_PA11、CAN_RX_PA12
                                // 1-使用CAN1_TX_PB9、CAN1_RX_PB8



/*****************************************************************************
 ** 全局变量
****************************************************************************/
typedef struct
{
    CanRxMsg RxData;

    // RxData的解释数据，为减轻代码使用难度;
    uint32_t  ReceivedId;       // 帧ID
    uint8_t   ReceivedIDE;      // 帧ID格式; 0_标准帧、4_扩展帧
    uint8_t   ReceivedRTR;      // 帧类型; 0_数据帧、2_遥控帧
    uint8_t   ReceivedNum;      // 接收到的字节数
    uint8_t   ReceivedData[9];  // 接收到的数据; CAN一帧数据，最大有效负载为8字节，这里开辟9个字节，是为了最后一字节存放'\0', 以适配输出字符串
    uint8_t   ReceivedFMI;      // 过滤器匹配序号
} xCAN_InfoDef;
extern xCAN_InfoDef  xCAN;      // 声明为全局变量,方便记录信息、状态


// 波特率宏定义，不用修改
#define CAN_BAUDRATE_10KBPS     ((uint16_t)10)
#define CAN_BAUDRATE_20KBPS     ((uint16_t)20)
#define CAN_BAUDRATE_50KBPS     ((uint16_t)50)
#define CAN_BAUDRATE_125KBPS    ((uint16_t)125)
#define CAN_BAUDRATE_250KBPS    ((uint16_t)250)
#define CAN_BAUDRATE_500KBPS    ((uint16_t)500)
#define CAN_BAUDRATE_1000KBPS   ((uint16_t)1000)


#ifndef CAN_Id_Extended
    #define CAN_Id_Standard             ((uint32_t)0x00000000)  // 标准帧
    #define CAN_Id_Extended             ((uint32_t)0x00000004)  // 扩展帧
#endif



/*****************************************************************************
 ** 声明全局函数
****************************************************************************/
void    CAN1_Config(void);          // 初始化CAN1; 参数：波特率
void    CAN_CheckReceived(void);    // 检查是否接收到新数据、处理数据                                           
uint8_t CAN1_SendData(void);        // 发送数据; 




#endif


